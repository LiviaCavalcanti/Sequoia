from dataclasses import dataclass
from typing import Iterable, Union, List

from simple_parsing import choice, field, subparsers
from torch.utils.data import DataLoader, Dataset

from common.losses import LossInfo
from config import Config

from experiments.class_incremental import ClassIncremental


@dataclass
class TaskIncremental(ClassIncremental):
    epochs_per_task: int = 1  # Number of epochs on each task's dataset.

    def run(self):
        for i, task in enumerate(self.dataset.train_tasks):
            print(f"Starting task {i}: {task}")

            self.dataset.current_train_task = task
            self.load()
            self.hparams.epochs = self.epochs_per_task
            
            # TODO: right now there are a whole bunch of plots and stuff being generated by `run`, that we don't want to create every single time.
            super().run()
            
            print(f"finished task {i}")
